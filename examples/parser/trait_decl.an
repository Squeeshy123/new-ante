
trait Show a with
    show: a -> String

trait Cast a b -> c with
    cast: a -> b

// A collection c of elements of type e
// The element type is uniquely determined by the collection's type c
trait Collection c -> e with
    push: c - e -> c
    pop: c -> Maybe e
    empty: c


impl Show String with
    show s = s

impl Cast String String String given Show String with
    cast s = show s

impl Collection (a -> a) unit with
    push c e = c
    pop c = ()
    empty = fn a -> a

// args: --parse
// expected stderr:
// examples/parser/trait_decl.an:2:0	error: Expected a top-level item but found `trait`
// trait Show a with
// 
// examples/parser/trait_decl.an:5:0	error: Expected a top-level item but found `trait`
// trait Cast a b -> c with
// 
// examples/parser/trait_decl.an:10:0	error: Expected a top-level item but found `trait`
// trait Collection c -> e with
// 
// examples/parser/trait_decl.an:16:0	error: Expected a top-level item but found `impl`
// impl Show String with
// 
// examples/parser/trait_decl.an:19:0	error: Expected a top-level item but found `impl`
// impl Cast String String String given Show String with
// 
// examples/parser/trait_decl.an:22:0	error: Expected a top-level item but found `impl`
// impl Collection (a -> a) unit with

