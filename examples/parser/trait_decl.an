
trait Show a with
    show: fn a -> String

trait Cast a b -> c with
    cast: fn a -> b

// A collection c of elements of type e
// The element type is uniquely determined by the collection's type c
trait Collection c -> e with
    push: fn c e -> c
    pop: fn c -> Maybe e
    empty: c


impl Show String with
    show s = s

impl Cast String String String given Show String with
    cast s = show s

impl Collection (fn a -> a) Unit with
    push c e = c
    pop c = ()
    empty = fn a -> a

// args: --parse
// expected stdout:
// trait Show a with
//     show: fn a -> String
// 
// trait Cast a b -> c with
//     cast: fn a -> b
// 
// trait Collection c -> e with
//     push: fn c e -> c
//     pop: fn c -> Maybe e
//     empty: c
// 
// impl Show String with
//     show s = s
// 
// impl Collection fn a -> a Unit with
//     push c e = c

// expected stderr:
// examples/parser/trait_decl.an:19:31	error: Expected `with` to separate this trait impl's signature from its body but found `given`
// impl Cast String String String given Show String with
// 
// examples/parser/trait_decl.an:24:0	error: Expected an unindent but found a newline
//     pop c = ()

