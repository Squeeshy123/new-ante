
type Struct1 = a:I32, b:F64, c:String

type Struct2 t =
    a: Thingy
    b: Generic t Thingy

type Union1 a b = | Variant1 | Variant2

type Maybe a =
   | Some a
   | None

type List a = | Nil | Cons a (&List a)


type UniquePtr a = &a

t = 3 : I32

// args: --parse
// expected stdout:
// type Struct1 =
//     a: I32
//     b: F64
//     c: String
// 
// type Struct2 =
//     a: Thingy
//     b: Generic t Thingy
// 
// type Union1 =
//     | Variant1
//     | Variant2
// 
// type Maybe =
//     | Some a
//     | None
// 
// type List =
//     | Nil
//     | Cons a (error)
// 
// t = 3: I32

// expected stderr:
// examples/parser/type_decl.an:14:30	error: Expected a type but found `&`
// type List a = | Nil | Cons a (&List a)
// 
// examples/parser/type_decl.an:17:19	error: Expected a field name or `|` to start this type body but found `&`
// type UniquePtr a = &a

