
type Struct1 = a:I32, b:F64, c:String

type Thingy = Struct1

type Generic a b = first: a, second: b

type Struct2 t =
    a: Thingy
    b: Generic t Thingy

type Union1 a b = | Variant1 | Variant2

type Option a =
   | Just a
   | Nothing

t = Option.Just 1

type MyRef a = &a

// args: --check
// expected stdout:
// // id = c1m29_67
// type Struct1_? =
//     a_?: I32
//     b_?: F64
//     c_?: String_b
// 
// // id = c1m29_25
// type Thingy_? = Struct1_c1m29_67
// 
// // id = c1m29_24
// type Generic_? =
//     first_?: a_1
//     second_?: b_2
// 
// // id = c1m29_35
// type Struct2_? =
//     a_?: Thingy_c1m29_25
//     b_?: Generic_c1m29_24 t_1 Thingy_c1m29_25
// 
// // id = c1m29_92
// type Union1_? =
//     | Variant1_?
//     | Variant2_?
// 
// // id = c1m29_8
// type Option_? =
//     | Just_? a_1
//     | Nothing_?
// 
// // id = c1m29_96
// t_? = Option.Just_c1m29_8 1
// 
// // id = c1m29_55
// type MyRef_? = & a_1

