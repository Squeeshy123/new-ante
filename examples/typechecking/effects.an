effect Log with
    log: String -> Unit

effect Use a with
    get: Unit -> a
    set: a -> Unit

// Expect `can Use Unit` and not `can Log`
handle_basic () = 
    handle log "test1"
    | log v -> set v

use_resume () =
    handle ()
    // Test these two 'resume's refer to two different variables
    // with incompatible types
    | get () -> resume 3i32
    | set _ -> resume ()

does_use x =
    y = get ()
    set (y + x)

// args: --check --show-types
// expected stderr:
// examples/typechecking/effects.an:1:1	error: Expected a top-level item but found `effect`
// effect Log with
// 
// examples/typechecking/effects.an:4:0	error: Expected a top-level item but found `effect`
// effect Use a with
// 
// examples/typechecking/effects.an:10:4	error: Expected an unindent but found `handle`
//     handle log "test1"
// 
// examples/typechecking/effects.an:14:4	error: Expected an unindent but found `handle`
//     handle ()
// 
// examples/typechecking/effects.an:22:4	error: `set` is not defined, was it a typo?
//     set (y + x)
// 
// examples/typechecking/effects.an:22:11	error: `+` is not defined, was it a typo?
//     set (y + x)
// 
// examples/typechecking/effects.an:22:9	error: `y` is not defined, was it a typo?
//     set (y + x)

