
trait Bar a -> b with
    bar: fn a a -> b


impl Bar I32 String with
    bar _ _ = "good"

impl Bar I32 I32 with
    bar _ _ = "bad return type"

impl Bar I32 Char String F64 Unit with
    bar _ _ = "bad impl args"



impl Bar I32 F64 with
    bar _ _ = 23.2 // Should be an error, we already have a Bar I32

foo a b = bar a b

baz (x: String) y = bar x y
bar 3 2

bar "four" "five"

// args: --check --show-types
// expected stderr:
// examples/typechecking/trait_impls.an:6:5	error: Expected an identifier but found `Bar`
// impl Bar I32 String with
// 
// examples/typechecking/trait_impls.an:9:5	error: Expected an identifier but found `Bar`
// impl Bar I32 I32 with
// 
// examples/typechecking/trait_impls.an:12:5	error: Expected an identifier but found `Bar`
// impl Bar I32 Char String F64 Unit with
// 
// examples/typechecking/trait_impls.an:17:5	error: Expected an identifier but found `Bar`
// impl Bar I32 F64 with
// 
// examples/typechecking/trait_impls.an:25:0	error: Expected `=` to begin the function body but found a newline
// bar "four" "five"
// 
// examples/typechecking/trait_impls.an:25:4	error: Expected `=` to begin the function body but found `"four"`
// bar "four" "five"
// 
// examples/typechecking/trait_impls.an:20:10	error: `bar` is not defined, was it a typo?
// foo a b = bar a b
// 
// examples/typechecking/trait_impls.an:22:20	error: `bar` is not defined, was it a typo?
// baz (x: String) y = bar x y

