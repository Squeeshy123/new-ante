
trait Functor f with
    map: f a - (a -> b) -> f b

trait Monad m with
    wrap: a -> m a
    bind: m a - (a -> m b) -> m b


impl Functor Maybe with
    map m f =
        match m
        | Some x -> Some (f x)
        | None -> None

impl Monad Maybe with
    wrap a = Some a
    
    bind m f =
        match m
        | Some x -> f x
        | None -> None

// args: --check --show-types
// expected stderr:
// examples/typechecking/functor_and_monad.an:2:0	error: Expected a top-level item but found `trait`
// trait Functor f with
// 
// examples/typechecking/functor_and_monad.an:5:0	error: Expected a top-level item but found `trait`
// trait Monad m with
// 
// examples/typechecking/functor_and_monad.an:10:0	error: Expected a top-level item but found `impl`
// impl Functor Maybe with
// 
// examples/typechecking/functor_and_monad.an:16:0	error: Expected a top-level item but found `impl`
// impl Monad Maybe with

