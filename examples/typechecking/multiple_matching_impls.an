
type Thing = nothing: Unit

trait Foo a with
    foo: fn a -> Unit

trait Bar a with
    bar: fn a -> Unit

trait Baz a with
    baz: fn a -> Unit

// The call from which the `Foo a` constraint arises
foo (Thing ())

// Candidate 1
impl Foo a given Bar a with
    foo a = bar a

impl Bar a given Baz a with
    bar a = baz a

impl Baz Thing with
    baz _ = ()


// Does not match
impl Foo a given Print a with
    foo _ = ()


// Candidate 2
impl Foo Thing with
    foo _ = ()

// args: --check
// expected stderr:
// examples/typechecking/multiple_matching_impls.an:16:0	error: Expected `=` to begin the function body but found a newline
// // Candidate 1
// 
// examples/typechecking/multiple_matching_impls.an:17:11	error: Expected `with` to separate this trait impl's signature from its body but found `given`
// impl Foo a given Bar a with
// 
// examples/typechecking/multiple_matching_impls.an:20:11	error: Expected `with` to separate this trait impl's signature from its body but found `given`
// impl Bar a given Baz a with
// 
// examples/typechecking/multiple_matching_impls.an:28:11	error: Expected `with` to separate this trait impl's signature from its body but found `given`
// impl Foo a given Print a with

