
type Thing = nothing: Unit

trait Foo a with
    foo: fn a -> Unit

trait Bar a with
    bar: fn a -> Unit

trait Baz a with
    baz: fn a -> Unit

// The call from which the `Foo a` constraint arises
foo (Thing ())

// Candidate 1
impl candidate1 {_: Bar a}: Foo a with
    foo a = bar a

impl bar {_: Baz a}: Bar a with
    bar a = baz a

impl baz: Baz Thing with
    baz _ = ()


// Does not match
impl does_not_match {_: Print a}: Foo a with
    foo _ = ()


// Candidate 2
impl candidate2: Foo Thing with
    foo _ = ()

// args: --check
// expected stderr:
// examples/typechecking/multiple_matching_impls.an:16:0	error: Expected `=` to begin the function body but found a newline
// // Candidate 1
// 
// examples/typechecking/multiple_matching_impls.an:18:12	error: `bar` is not defined, was it a typo?
//     foo a = bar a
// 
// examples/typechecking/multiple_matching_impls.an:21:12	error: `baz` is not defined, was it a typo?
//     bar a = baz a

