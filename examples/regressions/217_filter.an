effect Emit a with
    emit: a -> Unit

iota (n: U32) = loop (i = 0) ->
    if i < n then
        emit i
        recur (i + 1)

// Removing the `can` here used to panic
filter (stream: Unit -> Unit) (f: a -> Bool pure) =
    handle 
        stream ()
    | emit x ->
        if f x then
            emit x
        resume ()

for (stream: Unit -> Unit can Emit a) (f: a -> Unit pure) =
    handle 
        stream ()
    | emit x ->
        f x
        resume ()

zero_to_nine () =
    iota 10

filtered () =
    filter zero_to_nine (fn x -> x % 2 == 0)

for filtered print

// args: --delete-binary
// expected stderr:
// examples/regressions/217_filter.an:2:12	error: Expected an unindent but found `->`
//     emit: a -> Unit
// 
// examples/regressions/217_filter.an:4:16	error: Expected an expression but found `loop`
// iota (n: U32) = loop (i = 0) ->
// 
// examples/regressions/217_filter.an:10:21	error: Expected `=` to begin the function body but found `->`
// filter (stream: Unit -> Unit) (f: a -> Bool pure) =
// 
// examples/regressions/217_filter.an:18:18	error: Expected `=` to begin the function body but found `->`
// for (stream: Unit -> Unit can Emit a) (f: a -> Unit pure) =
// 
// examples/regressions/217_filter.an:29:25	error: Expected a parameter but found `fn`
//     filter zero_to_nine (fn x -> x % 2 == 0)
// 
// examples/regressions/217_filter.an:29:25	error: Expected an expression but found `fn`
//     filter zero_to_nine (fn x -> x % 2 == 0)
// 
// examples/regressions/217_filter.an:33:0	error: Expected `=` to begin the function body but found a newline
// // args: --delete-binary
// 
// examples/regressions/217_filter.an:29:4	error: `filter` is not defined, was it a typo?
//     filter zero_to_nine (fn x -> x % 2 == 0)

